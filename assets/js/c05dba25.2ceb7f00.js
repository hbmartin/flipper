(self.webpackChunk=self.webpackChunk||[]).push([[9358],{3905:(e,t,a)=>{"use strict";a.d(t,{Zo:()=>u,kt:()=>b});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(a),b=r,g=d["".concat(o,".").concat(b)]||d[b]||c[b]||i;return a?n.createElement(g,s(s({ref:t},u),{},{components:a})):n.createElement(g,s({ref:t},u))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<i;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8187:(e,t,a)=>{"use strict";a.r(t),a.d(t,{frontMatter:()=>s,metadata:()=>l,toc:()=>o,default:()=>u});var n=a(4034),r=a(9973),i=(a(7294),a(3905)),s={id:"databases-plugin",title:"Databases Plugin Setup",sidebar_label:"Databases"},l={unversionedId:"setup/databases-plugin",id:"setup/databases-plugin",isDocsHomePage:!1,title:"Databases Plugin Setup",description:"To use the databases plugin, you need to add the plugin to your Flipper client instance. The plugin is currently only available for Android.",source:"@site/../docs/setup/databases-plugin.mdx",sourceDirName:"setup",slug:"/setup/databases-plugin",permalink:"/docs/setup/databases-plugin",editUrl:"https://github.com/facebook/flipper/blob/master/website/../docs/setup/databases-plugin.mdx",version:"current",sidebar_label:"Databases",frontMatter:{id:"databases-plugin",title:"Databases Plugin Setup",sidebar_label:"Databases"},sidebar:"setup",previous:{title:"Network Setup",permalink:"/docs/setup/network-plugin"},next:{title:"Images Setup",permalink:"/docs/setup/images-plugin"}},o=[{value:"Android",id:"android",children:[]}],p={toc:o};function u(e){var t=e.components,a=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"To use the databases plugin, you need to add the plugin to your Flipper client instance. The plugin is currently only available for Android."),(0,i.kt)("h2",{id:"android"},"Android"),(0,i.kt)("p",null,"Instantiate and add the plugin in ",(0,i.kt)("inlineCode",{parentName:"p"},"FlipperClient"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import com.facebook.flipper.plugins.databases.DatabasesFlipperPlugin;\n\nclient.addPlugin(new DatabasesFlipperPlugin(context));\n")),(0,i.kt)("p",null,"By default it will list all sqlite databases returned by the context. If you are storing a sqlite database somewhere else, you can specify a ",(0,i.kt)("inlineCode",{parentName:"p"},"File")," to it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'client.addPlugin(new DatabasesFlipperPlugin(new SqliteDatabaseDriver(context, new SqliteDatabaseProvider() {\n    @Override\n    public List<File> getDatabaseFiles() {\n        List<File> databaseFiles = new ArrayList<>();\n        for (String databaseName : context.databaseList()) {\n            databaseFiles.add(context.getDatabasePath(databaseName));\n        }\n        databaseFiles.add("...path_to_your_db...")\n        return databaseFiles;\n    }\n})));\n')),(0,i.kt)("p",null,"If you use a different type of database other than sqlite, you can implement a driver to be able to access it via Flipper. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"client.addPlugin(new DatabasesFlipperPlugin(new DatabaseDriver(context) {\n    @Override\n    public List getDatabases() {\n        return null;\n    }\n\n    @Override\n    public List<String> getTableNames(DatabaseDescriptor databaseDescriptor) {\n        return null;\n    }\n\n    @Override\n    public DatabaseGetTableDataResponse getTableData(DatabaseDescriptor databaseDescriptor, String table, String order, boolean reverse, int start, int count) {\n        return null;\n    }\n\n    @Override\n    public DatabaseGetTableStructureResponse getTableStructure(DatabaseDescriptor databaseDescriptor, String table) {\n        return null;\n    }\n\n    @Override\n    public DatabaseExecuteSqlResponse executeSQL(DatabaseDescriptor databaseDescriptor, String query) {\n        return null;\n    }\n    }));\n")))}u.isMDXComponent=!0}}]);